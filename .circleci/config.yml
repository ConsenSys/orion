---
version: 2.1

orbs:
  slack: circleci/slack@3.4.1
  
executors:
  default:  # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
    resource_class: medium+
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m

  with_db:
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
      - image: postgres:11.4-alpine
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: orion
    resource_class: medium+
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: orion

  machine:
    machine:
      image: ubuntu-2004:202008-01 #Ubuntu 20.04, docker 19.03, docker-compose 1.27.4
      docker_layer_caching: true
    working_directory: ~/project

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libsodium23 libsodium-dev apt-transport-https
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}
            - deps-
      - attach_workspace:
          at: ~/project

  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="test-results/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_test_results:
          path: test-results

  notify:
    description: "Notify Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: 'master'
                    

jobs:
  build:
    executor: default
    steps:
      - prepare
      - run:
          name: Spotless checks
          command: ./gradlew spotlesscheck
      - run:
          name: Downloading dependencies
          command: ./gradlew dependencies checkLicenses
      - run:
          name: Compiling
          command: ./gradlew assemble
      - notify          
      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
      - store_artifacts:
          name: Uploading artifacts
          path: build/distributions
          destination: distributions
          when: always
      - run:
          name: Collecting reports
          command: |
            mkdir -p ~/reports/license
            (cd ./build/reports/license && tar c .) | (cd ~/reports/license && tar x)
          when: always
      - store_artifacts:
          name: Uploading reports
          path: ~/reports
          destination: reports

  test:
    executor: default
    steps:
      - prepare
      - run:
          name: Running unit tests
          command: ./gradlew --stacktrace test
      - notify          
      - capture_test_results

  acceptanceTest:
    executor: with_db
    steps:
      - prepare
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres to startup and be ready && exit 1
      - run:
          name: Running acceptance tests
          command: ./gradlew --stacktrace acceptanceTest
      - notify          
      - capture_test_results
      - run:
          name: Collecting coverage reports
          command: |
              ./gradlew jacocoTestReport
              find . -type d -regex ".*/build/reports/jacoco/test/html" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/jacoco\/test\/html//'`
                  mkdir -p ~/reports/jacoco/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/jacoco/"$module" && tar x)
              done
          when: always
      - store_artifacts:
          name: Uploading reports
          path: ~/reports
          destination: reports

  javaDoc:
    executor: default
    steps:
      - prepare
      - run:
          name: Building JavaDoc
          command: ./gradlew javadoc
      - notify          
      - run:
          name: Collecting JavaDoc
          command: |
            find . -type d -regex ".*/build/docs/javadoc" | while read dir; do
                module=`echo $dir | sed -e 's/build\/docs\/javadoc//'`
                mkdir -p ~/docs/"$module"
                (cd "$dir" && tar c .) | (cd ~/docs/"$module" && tar x)
            done
      - store_artifacts:
          name: Uploading JavaDoc
          path: ~/docs
          destination: javadoc

  buildDocker:
    executor: machine
    steps:
      - prepare
      - run:
          name: hadoLint
          command: |
            docker run --rm -i hadolint/hadolint < docker/Dockerfile
      - run:
          name: build and test docker image
          command: |
            mkdir -p docker/reports
            ./gradlew --no-daemon testDocker testDockerHA
      - notify            

  upload-distribution:
    executor: default
    steps:
      - prepare
      - run:
          name: Upload skinny targz file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).tar.gz consensys binaries orion $(cat build/version)"
      - run:
          name: Upload skinny zip file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).zip consensys binaries orion $(cat build/version)"
      - deploy:
          name: Deploying snapshot to Bintray (release branches only)
          command: |
            if [ -z "${CIRCLE_PULL_REQUEST}" ] && echo "${CIRCLE_BRANCH}" | grep -q -E '^master$|^[0-9]+\.[0-9]+$'; then
              echo "Start deployment"
              BINTRAY_DEPLOY=true ./gradlew deploy
            else
              echo "Start dry run deployment"
              ./gradlew deploy
            fi
      - notify

  publish-cloudsmith:
    executor: default
    steps:
      - prepare
      - run:
          name: Install Python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python3-venv
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish to Cloudsmith
          command: |
            ./gradlew --no-daemon --parallel cloudsmithUpload publish

  publishDocker:
    executor: default
    steps:
      - prepare
      - setup_remote_docker
      - run:
          name: Publish Docker
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" dockerUpload
      - notify
            

workflows:
  version: 2
  pipeline:
    jobs:
      - build:
          context:
            - dockerhub-quorumengineering-ro
      - javaDoc:
          context:
            - dockerhub-quorumengineering-ro      
      - test:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro            
      - acceptanceTest:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro            
      - buildDocker:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro            
      - upload-distribution:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
          requires:
            - build
            - test
            - acceptanceTest
          context:
            - dockerhub-quorumengineering-ro
            - quorum-gradle
      - publish-cloudsmith:
          requires:
            - build
            - test
            - acceptanceTest
          context:
            - dockerhub-quorumengineering-ro
            - quorum-gradle
      - publishDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
          requires:
            - buildDocker
            - test
            - acceptanceTest
          context:
            - dockerhub-quorumengineering-rw 
