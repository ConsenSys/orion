version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      TERM: dumb
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
      GRADLE_MAX_TEST_FORKS: 2

    steps:
      - checkout

      - run:
          name: Install Sodium Dependencies
          command: |
            sudo apt-get install -y libsodium18

      - restore_cache:
          name: Restoring cached gradle dependencies
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-

      - run:
          name: Downloading dependencies
          command: ./gradlew dependencies checkLicenses

      - run:
          name: Compiling
          command: ./gradlew assemble

      - store_artifacts:
          name: Uploading artifacts
          path: build/distributions
          destination: distributions
          when: always

      - run:
          name: Running unit tests
          command: ./gradlew --stacktrace test

      - run:
          name: Running acceptance tests
          command: ./gradlew --stacktrace acceptanceTest

      - run:
          name: Collecting test results
          command: |
            ./gradlew jacocoTestReport
            mkdir -p ~/test-results/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/ \;
          when: always

      - store_test_results:
          name: Uploading test results
          path: ~/test-results
          destination: tests
          when: always

      - run:
          name: Collecting reports
          command: |
            mkdir -p ~/reports/license
            (cd ./build/reports/license && tar c .) | (cd ~/reports/license && tar x)
            find . -type d -regex ".*/build/reports/tests/test" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/tests\/test//'`
                  mkdir -p ~/reports/test/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/test/"$module" && tar x)
              done
              find . -type d -regex ".*/build/reports/jacoco/test/html" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/jacoco\/test\/html//'`
                  mkdir -p ~/reports/jacoco/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/jacoco/"$module" && tar x)
              done
          when: always

      - store_artifacts:
          name: Uploading reports
          path: ~/reports
          destination: reports

      - run:
          name: Building JavaDoc
          command: ./gradlew javadoc

      - run:
          name: Collecting JavaDoc
          command: |
              find . -type d -regex ".*/build/docs/javadoc" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/docs\/javadoc//'`
                  mkdir -p ~/docs/"$module"
                  (cd "$dir" && tar c .) | (cd ~/docs/"$module" && tar x)
              done

      - store_artifacts:
          name: Uploading JavaDoc
          path: ~/docs
          destination: javadoc

      - save_cache:
          name: Caching gradle dependencies
          paths:
          - .gradle
          - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .BuildNum }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - build/version
            - build/distributions/*

  upload-distribution:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Upload skinny targz file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).tar.gz consensys binaries orion $(cat build/version)"
      - run:
          name: Upload skinny zip file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).zip consensys binaries orion $(cat build/version)"

workflows:
  version: 2
  pipeline:
    jobs:
      - build
      - upload-distribution:
          requires:
            - build
          filters:
            branches:
              only: master
