/*
 * Copyright 2019 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id "com.diffplug.gradle.spotless" version "3.10.0"
  id "com.github.hierynomus.license" version "0.14.0"
  id "com.jfrog.bintray" version "1.8.4"
  id 'net.ltgt.errorprone' version '0.8'
}

apply plugin: 'java-library'
apply plugin: "scala"
apply plugin: "jacoco"
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply from: "gradle/check-licenses.gradle"
apply plugin: 'com.jfrog.bintray'

version = '1.2.0'

//////
// Default tasks and build aliases

defaultTasks 'checkLicenses', 'assemble', 'javadoc', 'test', 'acceptanceTest'

def buildAliases = ['dev': [
    'spotlessApply',
    'checkLicenses',
    'assemble',
    'javadoc',
    'test',
    'acceptanceTest'
  ]]

def expandedTaskList = []
gradle.startParameter.taskNames.each {
  expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten()


/////
// Source formatting

spotless {
  java {
    licenseHeaderFile 'gradle/spotless.license.java'
    removeUnusedImports()
    eclipse().configFile(rootProject.file('gradle/eclipse-java-consensys-style.xml'))
    importOrder 'net.consensys', 'java', ''
    endWithNewline()
  }
  groovyGradle {
    target '**/*.gradle'
    greclipse().configFile(rootProject.file('gradle/greclipse-gradle-consensys-style.properties'))
    endWithNewline()
  }
  format 'scala', {
    target '**/*.scala'
    licenseHeaderFile 'gradle/spotless.license.java', 'package'
    paddedCell()
  }
  format 'build-gradle', {
    target '/build.gradle'
    licenseHeaderFile 'gradle/spotless.license.java', 'plugins'
    paddedCell()
  }
}

license { exclude "**/*" }


//////
// Compiler arguments

tasks.withType(JavaCompile) {
  options.compilerArgs += [
    '-proc:none',
    '-Xlint:unchecked',
    '-Xlint:cast',
    '-Xlint:rawtypes',
    '-Xlint:overloads',
    '-Xlint:divzero',
    '-Xlint:finally',
    '-Xlint:static',
    '-Werror',
  ]

  options.errorprone {
    check('FutureReturnValueIgnored', CheckSeverity.OFF)
    check('FutureReturnValueIgnored', CheckSeverity.OFF)
    check('EqualsGetClass', CheckSeverity.OFF)
    check('InsecureCryptoUsage', CheckSeverity.WARN)
    check('FieldCanBeFinal', CheckSeverity.WARN)
    check('WildcardImport', CheckSeverity.WARN)
    check('TestExceptionChecker', CheckSeverity.WARN)
    // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
    if ((JavaVersion.current().majorVersion as Integer) > 11) {
      check('Finally', CheckSeverity.OFF)
    }
  }
}


//////
// Additional source sets (acceptance and performance tests)

test { useJUnitPlatform() }

sourceSets {
  acceptance {
    java.srcDir file('src/acceptance-test/java')
    resources.srcDir file('src/acceptance-test/resources')
    compileClasspath += main.runtimeClasspath + test.runtimeClasspath
    runtimeClasspath += main.runtimeClasspath + test.runtimeClasspath
  }
  performance {
    scala.srcDir file('src/performance-test/scala')
    resources.srcDir file('src/performance-test/resources')
    compileClasspath += main.runtimeClasspath
    runtimeClasspath += main.runtimeClasspath
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task acceptanceTest(type: Test) {
  description = 'Runs the acceptance tests'
  group = 'verification'
  useJUnitPlatform()
  setTestClassesDirs(sourceSets.acceptance.output.getClassesDirs())
  classpath = sourceSets.acceptance.runtimeClasspath
  reports.junitXml.setDestination(file("$buildDir/acceptance-results"))
  reports.html.setDestination(file("$buildDir/reports/acceptance"))
}

static def gatlingURL() {
  def appUrl = System.getProperty('gatlingURL')
  appUrl ?: 'http://localhost:8295'
}

task startOrion {
  dependsOn installDist
  doLast {
    copy {
      from "$projectDir/src/performance-test/resources"
      into "$buildDir/install/orion"
      include '*'
    }
    ext.process1 = new ProcessBuilder()
      .directory(new File("$buildDir/install/orion"))
      .command('bin/orion', 'config-8081.txt')
      .start()
    ext.process2 = new ProcessBuilder()
      .directory(new File("$buildDir/install/orion"))
      .command('bin/orion', 'config-8083.txt')
      .start()
    ext.process3 = new ProcessBuilder()
      .directory(new File("$buildDir/install/orion"))
      .command('bin/orion', 'config-8085.txt')
      .start()
  }
}

task stopOrion {
  doLast {
    if (tasks.startOrion.process1 != null) {
      tasks.startOrion.process1.destroy()
    }
    if (tasks.startOrion.process2 != null) {
      tasks.startOrion.process2.destroy()
    }
    if (tasks.startOrion.process3 != null) {
      tasks.startOrion.process3.destroy()
    }
  }
}

task performanceTest(type: JavaExec) {
  description = 'Runs the performance tests'
  group = 'verification'

  dependsOn startOrion
  finalizedBy stopOrion

  main = 'io.gatling.app.Gatling'
  classpath = sourceSets.performance.runtimeClasspath
  args = [
    '--simulation',
    'net.consensys.orion.load.LoadSimulation',
    '--results-folder',
    file('build/reports/performance').absolutePath,
    '--mute'
  ]
  environment = ['appUrl': gatlingURL()]
  systemProperties = ['gatling.core.directory.binaries': sourceSets.test.output.classesDirs]
}


//////
// Dependencies

repositories {
  jcenter()
  maven { url "https://consensys.bintray.com/consensys" }
}

dependencies {
  // cava
  compile 'net.consensys.cava:cava:0.5.0'

  // vertx
  compile 'io.vertx:vertx-core:3.7.0'
  compile 'io.vertx:vertx-web:3.7.0'

  // crypto
  compile 'org.bouncycastle:bcprov-jdk15on:1.60'
  compile 'org.bouncycastle:bcpkix-jdk15on:1.60'
  compile 'com.github.jnr:jnr-ffi:2.1.8'

  // http client
  testCompile 'com.squareup.okhttp3:okhttp:3.10.0'

  // storage
  compile 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
  compile 'org.mapdb:mapdb:3.0.7'
  compile 'com.jolbox:bonecp:0.8.0.RELEASE'

  // serialization
  compile 'com.moandjiezana.toml:toml4j:0.7.2'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
  compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.8'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'

  // logging
  compile 'org.apache.logging.log4j:log4j-api:2.11.2'
  compile 'org.apache.logging.log4j:log4j-core:2.11.2'
  compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.2'

  // XML
  compile 'javax.xml.bind:jaxb-api:2.3.0'

  // testing
  testCompile 'com.h2database:h2:1.4.197'
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
  testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
  testCompile 'org.awaitility:awaitility:3.1.0'
  // mock http server (unit test purposes)
  testCompile 'com.squareup.okhttp3:mockwebserver:3.10.0'

  // performance testing
  performanceCompile 'org.scala-lang:scala-library:2.12.6'
  performanceCompile 'org.scalatest:scalatest_2.12:3.0.5'
  performanceCompile 'io.gatling:gatling-core:2.3.1'
  performanceCompile 'io.gatling:gatling-http:2.3.1'
  performanceCompile 'io.gatling:gatling-app:2.3.1'
  performanceCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.3.1'

  errorprone 'com.google.errorprone:error_prone_core:2.3.3'
  if (JavaVersion.current().isJava8()) {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
  }
}


//////
// Packaging

mainClassName = 'net.consensys.orion.cmd.Orion'
group = 'net.consensys'

jar {
  doFirst {
    delete fileTree(dir:'build/libs', include: '*.jar')
    delete "$projectDir/src/main/resources/version.txt"
    delete "$buildDir/resources/main/version.txt"

    new File("$buildDir/resources/main/version.txt").text = """Application-name: $project.name
Version: $version
"""
    new File("$buildDir/version").text = """$version"""
  }
  manifest {
    attributes('Implementation-Title': project.name,
    'Implementation-Version': version,
    'Main-Class': mainClassName
    )
  }
}

distributions {
  main {
    contents {
      from("./LICENSE") { into "." }
    }
  }
}

distTar {
  doFirst {
    delete fileTree(dir:'build/distributions', include: '*.tar.gz')
  }
  compression = Compression.GZIP
  extension = 'tar.gz'
}

distZip {
  doFirst {
    delete fileTree(dir:'build/distributions', include: '*.zip')
  }
}


//////
// Runtime

applicationDefaultJvmArgs = [
  '-Dlog4j.configurationFile=log4j2.xml',
  "-Dvertx.disableFileCPResolving=true",
  "-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory"
]

run {
  description = 'Run Orion. Use -Pargs="" to pass arguments'
  standardInput = System.in

  if (project.hasProperty("args")) {
    args project.getProperty('args').split()
  }
}


//////
// Publishing & release

publishing {
  publications {
    mavenArtifact(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST
          name 'Orion'
          description 'A java implementation of a Enterprise Ethereum Private Transaction Manager.'
          url 'https://github.com/pegasyseng/orion'
          scm { url 'https://github.com/pegasyseng/orion' }
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/license/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }
        }
      }
    }
  }
}

task deploy() {}
deploy.dependsOn bintrayUpload

bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
  publications = ['mavenArtifact']
  override = true
  publish = true
  pkg {
    repo = "pegasys-repo"
    name = "orion"
    userOrg = "consensys"
    licenses = ["Apache-2.0"]
    vcsUrl = "https://github.com/pegasyseng/orion"
    version { name = project.version }
  }
}
