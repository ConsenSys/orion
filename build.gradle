plugins {
  id "com.diffplug.gradle.spotless" version "3.6.0"
  id 'com.palantir.git-version' version '0.10.0'
  id "com.github.hierynomus.license" version "0.14.0"
  id "com.github.johnrengelman.shadow" version "2.0.2"
}

apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'com.github.johnrengelman.shadow'

apply from: "gradle/check-licenses.gradle"

mainClassName = 'net.consensys.orion.api.cmd.Orion'
version = '0.1.0-' + versionDetails().gitHash[0..4] + '-' + getTimestamp()

// JVM Settings for Log4J and VertX
applicationDefaultJvmArgs = [
        '-Dlog4j.configurationFile=log4j2.xml',
        "-Dvertx.disableFileCPResolving=true",
        "-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory"
]

def buildAliases = ['dev': [
        'spotlessApply',
        'checkLicenses',
        'build'
]]

def expandedTaskList = []
gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten()

repositories {
    jcenter()
}

// added source sets (acceptance and integration tests)
sourceSets {
  acceptance {
    java.srcDir file('src/test-acceptance/java')
    resources.srcDir file('src/test-acceptance/resources')
    compileClasspath += main.output + test.output + configurations.testRuntime + main.compileClasspath + test.compileClasspath
    runtimeClasspath += output + compileClasspath
  }
}

dependencies {

  compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.58'
  compile 'com.moandjiezana.toml:toml4j:0.7.2'

  implementation 'org.mapdb:mapdb:3.0.5'
  implementation group: 'com.muquit.libsodiumjna', name: 'libsodium-jna', version: '1.0.4'
  testImplementation 'junit:junit:4.12'

  // vertx
  implementation 'io.vertx:vertx-core:3.5.0'
  implementation 'io.vertx:vertx-web:3.5.0'

  // http client
  implementation 'com.squareup.okhttp3:okhttp:3.9.1'

  //Storage
  implementation 'org.fusesource.leveldbjni:leveldbjni-all:1.8'

  // mock http server (unit test purposes)
  testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'

  // serialization
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.0'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.0'

  // logger
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
  compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.10.0'
}

jar {
    doLast {
        versionTxt()
    }
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': 'net.consensys.orion.api.cmd.Orion'
        )
    }
}

run {
  description = 'Run Orion. Use -Pargs="" to pass arguments'
  standardInput = System.in

  if (project.hasProperty("args")) {
    args project.getProperty('args').split()
  }
}

task acceptanceTest(type: Test) {
  description = 'Runs the acceptance tests'
  group = 'verification'
  setTestClassesDirs(sourceSets.acceptance.output.getClassesDirs())
  classpath = sourceSets.acceptance.runtimeClasspath
  reports.junitXml.setDestination(file("$buildDir/acceptance-results"))
  reports.html.setDestination(file("$buildDir/reports/acceptance"))
  dependsOn(test)
}

check {
  dependsOn(acceptanceTest)
}

spotless {
  java {
    removeUnusedImports()
    googleJavaFormat()
    importOrder 'net.consensys', 'java', ''
  }
}

task deleteTarGzip() {
    doFirst {
        delete fileTree(dir:'build/distributions', include: '*.tar.gz')
    }
}

distTar {
    compression = Compression.GZIP
    extension = 'tar.gz'
}
distTar.dependsOn deleteTarGzip

distZip {
    doFirst {
        delete fileTree(dir:'build/distributions', include: '*.zip')
    }
}

project.ext.fatJarBaseName = "orion-fat-jar"
shadowDistTar {
    baseName = project.fatJarBaseName
    compression = Compression.GZIP
    extension = 'tar.gz'
}
shadowDistTar.dependsOn deleteTarGzip

shadowDistZip {
    baseName = project.fatJarBaseName
}

shadowJar {
    baseName = project.fatJarBaseName
    classifier = null
}

// Generate the Timestamp for the version
def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd-HH-mm-ss-SSS')
}

// Create the version.txt file
def versionTxt()  {
    new File("$projectDir/src/main/resources/version.txt").text = """Application-name: $project.name
Version: $version
"""
}
